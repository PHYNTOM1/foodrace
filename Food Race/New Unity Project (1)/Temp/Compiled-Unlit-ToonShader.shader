// Compiled shader for all platforms

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Unlit/ToonShader" {
Properties {
 _MainTex ("Texture", 2D) = "white" { }
 _Brightness ("Brightness", Range(0.000000,1.000000)) = 0.300000
 _Strength ("Strength", Range(0.000000,1.000000)) = 0.500000
 _Color ("Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _Detail ("Detail", Range(0.000000,1.000000)) = 0.300000
}
SubShader { 
 LOD 100
 Tags { "RenderType"="Opaque" }


 // Stats for Vertex shader:
 //        d3d11: 15 math
 // Stats for Fragment shader:
 //        d3d11: 13 math, 1 texture
 Pass {
  Tags { "RenderType"="Opaque" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 15 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Normal"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 32
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// SV_POSITION              0   xyzw        1      POS   float   xyzw
// NORMAL                   0   xyz         2     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xy
      dcl_input v2.xyz
      dcl_output o0.xy
      dcl_output_siv o1.xyzw, position
      dcl_output o2.xyz
      dcl_temps 2
   0: mad o0.xy, v1.xyxx, cb0[2].xyxx, cb0[2].zwzz
   1: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   2: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   3: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   4: add r0.xyzw, r0.xyzw, cb1[3].xyzw
   5: mul r1.xyzw, r0.yyyy, cb2[18].xyzw
   6: mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
   7: mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
   8: mad o1.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
   9: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  10: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  11: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  12: dp3 r0.w, r0.xyzx, r0.xyzx
  13: rsq r0.w, r0.w
  14: mul o2.xyz, r0.wwww, r0.xyzx
  15: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 13 math, 2 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Float _Brightness at 48
  Float _Strength at 52
  Vector4 _Color at 64
  Float _Detail at 80
}
Constant Buffer "UnityLighting" (768 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// SV_POSITION              0   xyzw        1      POS   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xy
      dcl_input_ps linear v2.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: dp3 r0.x, v2.xyzx, v2.xyzx
   1: rsq r0.x, r0.x
   2: mul r0.xyz, r0.xxxx, v2.xyzx
   3: dp3 r0.w, cb1[0].xyzx, cb1[0].xyzx
   4: rsq r0.w, r0.w
   5: mul r1.xyz, r0.wwww, cb1[0].xyzx
   6: dp3 r0.x, r0.xyzx, r1.xyzx
   7: max r0.x, r0.x, l(0.000000)
   8: div r0.x, r0.x, cb0[5].x
   9: round_ni r0.x, r0.x
  10: mul r0.x, r0.x, cb0[3].y
  11: mad r0.xyzw, r0.xxxx, cb0[4].xyzw, cb0[3].xxxx
  12: sample r1.xyzw, v0.xyxx, t0.xyzw, s0
  13: mul o0.xyzw, r0.xyzw, r1.xyzw
  14: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles":
Shader Disassembly:
#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
attribute highp vec4 in_POSITION0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec3 in_NORMAL0;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec3 vs_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_NORMAL0.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	float _Brightness;
uniform 	float _Strength;
uniform 	vec4 _Color;
uniform 	float _Detail;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying mediump vec3 vs_NORMAL0;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;
    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * _WorldSpaceLightPos0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat0.x / _Detail;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Strength;
    u_xlat0 = u_xlat0.xxxx * _Color + vec4(_Brightness);
    u_xlat1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0 = u_xlat0 * u_xlat1;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "gles3":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (52 bytes) {
  Vector4 _WorldSpaceLightPos0 at 0
  Float _Brightness at 16
  Float _Strength at 20
  Vector4 _Color at 32
  Float _Detail at 48
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_NORMAL0.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	float _Brightness;
uniform 	float _Strength;
uniform 	vec4 _Color;
uniform 	float _Detail;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_NORMAL0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;
    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * _WorldSpaceLightPos0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat0.x / _Detail;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Strength;
    u_xlat0 = u_xlat0.xxxx * _Color + vec4(_Brightness);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0 = u_xlat0 * u_xlat1;
    SV_Target0 = u_xlat0;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float3 NORMAL0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.NORMAL0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "FGlobals" (52 bytes) on slot 0 {
  Vector4 _WorldSpaceLightPos0 at 0
  Float _Brightness at 16
  Float _Strength at 20
  Vector4 _Color at 32
  Float _Detail at 48
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float _Brightness;
    float _Strength;
    float4 _Color;
    float _Detail;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 NORMAL0 [[ user(NORMAL0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0.x = dot(input.NORMAL0.xyz, input.NORMAL0.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * input.NORMAL0.xyz;
    u_xlat6 = dot(FGlobals._WorldSpaceLightPos0.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat1.xyz = float3(u_xlat6) * FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat0.x / FGlobals._Detail;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * FGlobals._Strength;
    u_xlat0 = fma(u_xlat0.xxxx, FGlobals._Color, float4(FGlobals._Brightness));
    u_xlat1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    output.SV_Target0 = u_xlat0 * u_xlat1;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "glcore":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (52 bytes) {
  Vector4 _WorldSpaceLightPos0 at 0
  Float _Brightness at 16
  Float _Strength at 20
  Vector4 _Color at 32
  Float _Detail at 48
}
Constant Buffer "$Globals" (208 bytes) {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_NORMAL0;
out vec2 vs_TEXCOORD0;
out vec3 vs_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	float _Brightness;
uniform 	float _Strength;
uniform 	vec4 _Color;
uniform 	float _Detail;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_NORMAL0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;
    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * _WorldSpaceLightPos0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat0.x / _Detail;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _Strength;
    u_xlat0 = u_xlat0.xxxx * _Color + vec4(_Brightness);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0 = u_xlat0 * u_xlat1;
    return;
}

#endif


-- Hardware tier variant: Tier 1
-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "vulkan":
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Set 2D Texture "_MainTex" to set: 0, binding: 1, used in: Fragment  using sampler in set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals1871115161" (52 bytes) on set: 1, binding: 0, used in: Fragment  {
  Float _Brightness at 16
  Vector4 _Color at 32
  Float _Detail at 48
  Float _Strength at 20
  Vector4 _WorldSpaceLightPos0 at 0
}
Constant Buffer "VGlobals1871115161" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 142

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 9 11 36 87 99 130
                              Name 9  "vs_TEXCOORD0"
                              Decorate 9(vs_TEXCOORD0) Location 0
                              Decorate 11 Location 1
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 36 Location 0
                              MemberDecorate 85 0 BuiltIn Position
                              MemberDecorate 85 1 BuiltIn PointSize
                              MemberDecorate 85 2 BuiltIn ClipDistance
                              Decorate 85 Block
                              Decorate 99 Location 2
                              Decorate 130 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 2
               8:             TypePointer Output 7(fvec2)
 9(vs_TEXCOORD0):      8(ptr) Variable Output
              10:             TypePointer Input 7(fvec2)
              11:     10(ptr) Variable Input
              13:             TypeVector 6(float) 4
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 13(fvec4) 15
              17:             TypeArray 13(fvec4) 15
              18:             TypeArray 13(fvec4) 15
              19:             TypeStruct 16 17 18 13(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 3
              24:             TypePointer Uniform 13(fvec4)
              33:             TypePointer Private 13(fvec4)
              34:     33(ptr) Variable Private
              35:             TypePointer Input 13(fvec4)
              36:     35(ptr) Variable Input
              39:     22(int) Constant 0
              40:     22(int) Constant 1
              51:     22(int) Constant 2
              63:     33(ptr) Variable Private
              83:     14(int) Constant 1
              84:             TypeArray 6(float) 83
              85:             TypeStruct 13(fvec4) 6(float) 84
              86:             TypePointer Output 85(struct)
              87:     86(ptr) Variable Output
              95:             TypePointer Output 13(fvec4)
              97:             TypeVector 6(float) 3
              98:             TypePointer Input 97(fvec3)
              99:     98(ptr) Variable Input
             105:     14(int) Constant 0
             106:             TypePointer Private 6(float)
             119:     14(int) Constant 2
             121:    106(ptr) Variable Private
             129:             TypePointer Output 97(fvec3)
             130:    129(ptr) Variable Output
             136:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec2) Load 11
              25:     24(ptr) AccessChain 21 23
              26:   13(fvec4) Load 25
              27:    7(fvec2) VectorShuffle 26 26 0 1
              28:    7(fvec2) FMul 12 27
              29:     24(ptr) AccessChain 21 23
              30:   13(fvec4) Load 29
              31:    7(fvec2) VectorShuffle 30 30 2 3
              32:    7(fvec2) FAdd 28 31
                              Store 9(vs_TEXCOORD0) 32
              37:   13(fvec4) Load 36
              38:   13(fvec4) VectorShuffle 37 37 1 1 1 1
              41:     24(ptr) AccessChain 21 39 40
              42:   13(fvec4) Load 41
              43:   13(fvec4) FMul 38 42
                              Store 34 43
              44:     24(ptr) AccessChain 21 39 39
              45:   13(fvec4) Load 44
              46:   13(fvec4) Load 36
              47:   13(fvec4) VectorShuffle 46 46 0 0 0 0
              48:   13(fvec4) FMul 45 47
              49:   13(fvec4) Load 34
              50:   13(fvec4) FAdd 48 49
                              Store 34 50
              52:     24(ptr) AccessChain 21 39 51
              53:   13(fvec4) Load 52
              54:   13(fvec4) Load 36
              55:   13(fvec4) VectorShuffle 54 54 2 2 2 2
              56:   13(fvec4) FMul 53 55
              57:   13(fvec4) Load 34
              58:   13(fvec4) FAdd 56 57
                              Store 34 58
              59:   13(fvec4) Load 34
              60:     24(ptr) AccessChain 21 39 23
              61:   13(fvec4) Load 60
              62:   13(fvec4) FAdd 59 61
                              Store 34 62
              64:   13(fvec4) Load 34
              65:   13(fvec4) VectorShuffle 64 64 1 1 1 1
              66:     24(ptr) AccessChain 21 51 40
              67:   13(fvec4) Load 66
              68:   13(fvec4) FMul 65 67
                              Store 63 68
              69:     24(ptr) AccessChain 21 51 39
              70:   13(fvec4) Load 69
              71:   13(fvec4) Load 34
              72:   13(fvec4) VectorShuffle 71 71 0 0 0 0
              73:   13(fvec4) FMul 70 72
              74:   13(fvec4) Load 63
              75:   13(fvec4) FAdd 73 74
                              Store 63 75
              76:     24(ptr) AccessChain 21 51 51
              77:   13(fvec4) Load 76
              78:   13(fvec4) Load 34
              79:   13(fvec4) VectorShuffle 78 78 2 2 2 2
              80:   13(fvec4) FMul 77 79
              81:   13(fvec4) Load 63
              82:   13(fvec4) FAdd 80 81
                              Store 63 82
              88:     24(ptr) AccessChain 21 51 23
              89:   13(fvec4) Load 88
              90:   13(fvec4) Load 34
              91:   13(fvec4) VectorShuffle 90 90 3 3 3 3
              92:   13(fvec4) FMul 89 91
              93:   13(fvec4) Load 63
              94:   13(fvec4) FAdd 92 93
              96:     95(ptr) AccessChain 87 39
                              Store 96 94
             100:   97(fvec3) Load 99
             101:     24(ptr) AccessChain 21 40 39
             102:   13(fvec4) Load 101
             103:   97(fvec3) VectorShuffle 102 102 0 1 2
             104:    6(float) Dot 100 103
             107:    106(ptr) AccessChain 34 105
                              Store 107 104
             108:   97(fvec3) Load 99
             109:     24(ptr) AccessChain 21 40 40
             110:   13(fvec4) Load 109
             111:   97(fvec3) VectorShuffle 110 110 0 1 2
             112:    6(float) Dot 108 111
             113:    106(ptr) AccessChain 34 83
                              Store 113 112
             114:   97(fvec3) Load 99
             115:     24(ptr) AccessChain 21 40 51
             116:   13(fvec4) Load 115
             117:   97(fvec3) VectorShuffle 116 116 0 1 2
             118:    6(float) Dot 114 117
             120:    106(ptr) AccessChain 34 119
                              Store 120 118
             122:   13(fvec4) Load 34
             123:   97(fvec3) VectorShuffle 122 122 0 1 2
             124:   13(fvec4) Load 34
             125:   97(fvec3) VectorShuffle 124 124 0 1 2
             126:    6(float) Dot 123 125
                              Store 121 126
             127:    6(float) Load 121
             128:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 127
                              Store 121 128
             131:    6(float) Load 121
             132:   97(fvec3) CompositeConstruct 131 131 131
             133:   13(fvec4) Load 34
             134:   97(fvec3) VectorShuffle 133 133 0 1 2
             135:   97(fvec3) FMul 132 134
                              Store 130 135
             137:    136(ptr) AccessChain 87 39 83
             138:    6(float) Load 137
             139:    6(float) FNegate 138
             140:    136(ptr) AccessChain 87 39 83
                              Store 140 139
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80006
// Id's are bound by 117

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 12 108 112
                              ExecutionMode 4 OriginUpperLeft
                              Name 108  "vs_TEXCOORD0"
                              Decorate 12 Location 1
                              MemberDecorate 31 0 Offset 0
                              MemberDecorate 31 1 Offset 16
                              MemberDecorate 31 2 Offset 20
                              MemberDecorate 31 3 Offset 32
                              MemberDecorate 31 4 Offset 48
                              Decorate 31 Block
                              Decorate 33 DescriptorSet 1
                              Decorate 33 Binding 0
                              Decorate 98 DescriptorSet 0
                              Decorate 98 Binding 1
                              Decorate 102 DescriptorSet 0
                              Decorate 102 Binding 0
                              Decorate 108(vs_TEXCOORD0) Location 0
                              Decorate 112 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 3
              11:             TypePointer Input 10(fvec3)
              12:     11(ptr) Variable Input
              16:             TypeInt 32 0
              17:     16(int) Constant 0
              18:             TypePointer Private 6(float)
              30:     18(ptr) Variable Private
              31:             TypeStruct 7(fvec4) 6(float) 6(float) 7(fvec4) 6(float)
              32:             TypePointer Uniform 31(struct)
              33:     32(ptr) Variable Uniform
              34:             TypeInt 32 1
              35:     34(int) Constant 0
              36:             TypePointer Uniform 7(fvec4)
              46:      8(ptr) Variable Private
              63:    6(float) Constant 0
              68:     34(int) Constant 4
              69:             TypePointer Uniform 6(float)
              80:     34(int) Constant 2
              87:     34(int) Constant 3
              91:     34(int) Constant 1
              96:             TypeImage 6(float) 2D sampled format:Unknown
              97:             TypePointer UniformConstant 96
              98:     97(ptr) Variable UniformConstant
             100:             TypeSampler
             101:             TypePointer UniformConstant 100
             102:    101(ptr) Variable UniformConstant
             104:             TypeSampledImage 96
             106:             TypeVector 6(float) 2
             107:             TypePointer Input 106(fvec2)
108(vs_TEXCOORD0):    107(ptr) Variable Input
             111:             TypePointer Output 7(fvec4)
             112:    111(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              13:   10(fvec3) Load 12
              14:   10(fvec3) Load 12
              15:    6(float) Dot 13 14
              19:     18(ptr) AccessChain 9 17
                              Store 19 15
              20:     18(ptr) AccessChain 9 17
              21:    6(float) Load 20
              22:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 21
              23:     18(ptr) AccessChain 9 17
                              Store 23 22
              24:    7(fvec4) Load 9
              25:   10(fvec3) VectorShuffle 24 24 0 0 0
              26:   10(fvec3) Load 12
              27:   10(fvec3) FMul 25 26
              28:    7(fvec4) Load 9
              29:    7(fvec4) VectorShuffle 28 27 4 5 6 3
                              Store 9 29
              37:     36(ptr) AccessChain 33 35
              38:    7(fvec4) Load 37
              39:   10(fvec3) VectorShuffle 38 38 0 1 2
              40:     36(ptr) AccessChain 33 35
              41:    7(fvec4) Load 40
              42:   10(fvec3) VectorShuffle 41 41 0 1 2
              43:    6(float) Dot 39 42
                              Store 30 43
              44:    6(float) Load 30
              45:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 44
                              Store 30 45
              47:    6(float) Load 30
              48:   10(fvec3) CompositeConstruct 47 47 47
              49:     36(ptr) AccessChain 33 35
              50:    7(fvec4) Load 49
              51:   10(fvec3) VectorShuffle 50 50 0 1 2
              52:   10(fvec3) FMul 48 51
              53:    7(fvec4) Load 46
              54:    7(fvec4) VectorShuffle 53 52 4 5 6 3
                              Store 46 54
              55:    7(fvec4) Load 9
              56:   10(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 46
              58:   10(fvec3) VectorShuffle 57 57 0 1 2
              59:    6(float) Dot 56 58
              60:     18(ptr) AccessChain 9 17
                              Store 60 59
              61:     18(ptr) AccessChain 9 17
              62:    6(float) Load 61
              64:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 62 63
              65:     18(ptr) AccessChain 9 17
                              Store 65 64
              66:     18(ptr) AccessChain 9 17
              67:    6(float) Load 66
              70:     69(ptr) AccessChain 33 68
              71:    6(float) Load 70
              72:    6(float) FDiv 67 71
              73:     18(ptr) AccessChain 9 17
                              Store 73 72
              74:     18(ptr) AccessChain 9 17
              75:    6(float) Load 74
              76:    6(float) ExtInst 1(GLSL.std.450) 8(Floor) 75
              77:     18(ptr) AccessChain 9 17
                              Store 77 76
              78:     18(ptr) AccessChain 9 17
              79:    6(float) Load 78
              81:     69(ptr) AccessChain 33 80
              82:    6(float) Load 81
              83:    6(float) FMul 79 82
              84:     18(ptr) AccessChain 9 17
                              Store 84 83
              85:    7(fvec4) Load 9
              86:    7(fvec4) VectorShuffle 85 85 0 0 0 0
              88:     36(ptr) AccessChain 33 87
              89:    7(fvec4) Load 88
              90:    7(fvec4) FMul 86 89
              92:     69(ptr) AccessChain 33 91
              93:    6(float) Load 92
              94:    7(fvec4) CompositeConstruct 93 93 93 93
              95:    7(fvec4) FAdd 90 94
                              Store 9 95
              99:          96 Load 98
             103:         100 Load 102
             105:         104 SampledImage 99 103
             109:  106(fvec2) Load 108(vs_TEXCOORD0)
             110:    7(fvec4) ImageSampleImplicitLod 105 109
                              Store 46 110
             113:    7(fvec4) Load 9
             114:    7(fvec4) Load 46
             115:    7(fvec4) FMul 113 114
                              Store 112 115
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Hardware tier variant: Tier 1
-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }
}
}